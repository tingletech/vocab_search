#!/usr/bin/env groovy
import java.io.ByteArrayOutputStream
@Grab(group='org.apache.jena', module='jena-core', version='3.0.1')
import org.apache.jena.*
@Grab(group='org.apache.jena', module='jena-tdb', version='3.0.1')
import org.apache.jena.tdb.*
import org.apache.jena.query.*
import org.apache.jena.rdf.model.*

@Grab('com.github.albaker:GroovySparql:0.9.0')

import groovy.sparql.Sparql

def prefix = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX gvp: <http://vocab.getty.edu/ontology#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
"""

/*
 create with `tdbloader2 --loc jena-test aat/* tgn/* ulan/*`
*/
directory = "jena-test"

dataset = TDBFactory.createDataset(directory)
tdb = dataset.getDefaultModel()

/*
*/

def pluck(statements, new_graph) {
  // statements is a jena.rdf.model.StmtIterator
  // no return value; add statements to new_graph
  statements.each { x->
    new_graph.add(x)
  }
}

def innerQuery(subject) {
  // subject is the URI of a concept
  // looks up some info and returns a string of json-ld
  graph_out = ModelFactory.createDefaultModel()
  pluck(tdb.listStatements(subject, null, null), graph_out)
  buffer = new ByteArrayOutputStream()
  graph_out.write(buffer, 'JSON-LD')
  return buffer.toString()
}

def runQuery(concept) {
  // run SPARQL for this concept
  // writes out multiple <5MB batch files
  query = QueryFactory.create(prefix + """
    SELECT ?subject WHERE {
      ?subject rdf:type <${concept}>.
    } LIMIT 1 """
  )
  qexec = QueryExecutionFactory.create(query, dataset)
  results = qexec.execSelect()
  results.each{ x ->
    println innerQuery(x.subject)
  }
}

/* Concepts -- I could not get this query to work on jena
 * WHERE {
 *   ?subject rdf:type gvp:Subject.
 *   ?subject rdf:type skos:Concept. 
 * }, so; beloew, I hardcoded the Concepts I want, got the 
 * list by using this query: 
 * SELECT ?subject WHERE {
 *   ?subject rdfs:subClassOf gvp:Subject.
 *   ?subject rdfs:subClassOf skos:Concept.
 * } # http://vocab.getty.edu/sparql
*/
def concepts = [
  'http://vocab.getty.edu/ontology#Concept',
  'http://vocab.getty.edu/ontology#PhysPlaceConcept',
  'http://vocab.getty.edu/ontology#AdminPlaceConcept',
  'http://vocab.getty.edu/ontology#PhysAdminPlaceConcept',
  'http://vocab.getty.edu/ontology#PersonConcept',
  'http://vocab.getty.edu/ontology#GroupConcept',
  'http://vocab.getty.edu/ontology#UnknownPersonConcept',
]

for (concept in concepts) {
  runQuery(concept)
}


tdb.close()
dataset.close()
