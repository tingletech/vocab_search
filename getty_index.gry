#!/usr/bin/env groovy
import java.io.ByteArrayOutputStream
@Grab(group='org.apache.jena', module='jena-core', version='3.0.1')
import org.apache.jena.*
@Grab(group='org.apache.jena', module='jena-tdb', version='3.0.1')
import org.apache.jena.tdb.*
import org.apache.jena.query.*
import org.apache.jena.rdf.model.*

prefix = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX gvp: <http://vocab.getty.edu/ontology#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
"""

/*
 create with `tdbloader2 --loc jena-test aat/* tgn/* ulan/*`
 */
directory = "jena-test"

dataset = TDBFactory.createDataset(directory)
tdb = dataset.getDefaultModel()

/*
 */

def pluck(statements, out) {
  // statements is a jena.rdf.model.StmtIterator
  // no return value; add statements to new_graph
  for (x in statements) {
    obj = x.getObject()
    predicate = x.getPredicate().toString()
    key = predicate.substring(predicate.lastIndexOf('#') + 1)
    // new_graph.add(x)
    // look deeper
    if (obj in org.apache.jena.rdf.model.impl.LiteralImpl) {
      out[key] = obj
    } else if (obj in org.apache.jena.rdf.model.impl.ResourceImpl) {
      out[key] = []
      sub_predicates.each{ xx->
        deeper = tdb.listStatements(obj, xx, null)
        deeper.each { y ->
          out[key].push(y.getObject())
        }
      }
    }
  }
}

def innerQuery(subject) {
  // subject is the URI of a concept
  result = new LinkedHashMap()
  predicates.each{ x->
    pluck(tdb.listStatements(subject, x, null), result)
  }
  return result
}

def runQuery(concept) {
  // run SPARQL for this concept
  query = QueryFactory.create(prefix + """
    SELECT ?subject WHERE {
      ?subject rdf:type <${concept}>.
    } LIMIT 1 """
  )
  qexec = QueryExecutionFactory.create(query, dataset)
  results = qexec.execSelect()
  results.each{ x ->
    println innerQuery(x.subject)
  }
}

/* Concepts -- I could not get this query to work on jena
 * WHERE {
 *   ?subject rdf:type gvp:Subject.
 *   ?subject rdf:type skos:Concept. 
 * }, so; beloew, I hardcoded the Concepts I want, got the 
 * list by using this query: 
 * SELECT ?subject WHERE {
 *   ?subject rdfs:subClassOf gvp:Subject.
 *   ?subject rdfs:subClassOf skos:Concept.
 * } # http://vocab.getty.edu/sparql
*/
def concepts = [
  'http://vocab.getty.edu/ontology#Concept',
  'http://vocab.getty.edu/ontology#PhysPlaceConcept',
  'http://vocab.getty.edu/ontology#AdminPlaceConcept',
  'http://vocab.getty.edu/ontology#PhysAdminPlaceConcept',
  'http://vocab.getty.edu/ontology#PersonConcept',
  'http://vocab.getty.edu/ontology#GroupConcept',
  'http://vocab.getty.edu/ontology#UnknownPersonConcept',
]

predicates = [
  tdb.createProperty('http://vocab.getty.edu/ontology#prefLabelGVP'),
  tdb.createProperty('http://www.w3.org/2008/05/skos-xl#prefLabel'),
  tdb.createProperty('http://www.w3.org/2008/05/skos-xl#altLabel'),
  tdb.createProperty('http://vocab.getty.edu/ontology#parentStringAbbrev'),
]

sub_predicates = [
  tdb.createProperty('http://www.w3.org/2008/05/skos-xl#literalForm'),
  tdb.createProperty('http://www.w3.org/2001/XMLSchema#string'),
]

for (concept in concepts) {
  runQuery(concept)
}


tdb.close()
dataset.close()
